generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    templates     Template[]
    workouts      Workout[]
    trainers      Trainer[] @relation("TrainerToTrainees")
    trainees      Trainer[] @relation("TraineeToTrainers")
    assignedTemplatesAsTrainer AssignedTemplate[] @relation("AssignedTemplatesAsTrainer")
    assignedTemplatesAsTrainee AssignedTemplate[] @relation("AssignedTemplatesAsTrainee")
    schedules     Schedule[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Exercise {
    id               Int               @id @default(autoincrement())
    name             String
    description      String?
    createdAt        DateTime          @default(now())
    templateExercises TemplateExercise[]
    workoutLogs      WorkoutLog[]
}

model Template {
    id                Int                @id @default(autoincrement())
    userId            String
    name              String
    createdAt         DateTime           @default(now())
    user              User               @relation(fields: [userId], references: [id])
    templateExercises TemplateExercise[]
    workouts          Workout[]
    assignedTemplates AssignedTemplate[] @relation("AssignedTemplateTemplate")
    scheduledWorkouts ScheduledWorkout[]
}

model TemplateExercise {
    id          Int      @id @default(autoincrement())
    templateId  Int
    exerciseId  Int
    order       Int
    createdAt   DateTime @default(now())
    template    Template @relation(fields: [templateId], references: [id])
    exercise    Exercise @relation(fields: [exerciseId], references: [id])

    @@unique([templateId, exerciseId])
}

model Workout {
    id          Int         @id @default(autoincrement())
    userId      String
    templateId  Int
    date        DateTime    @default(now())
    createdAt   DateTime    @default(now())
    user        User        @relation(fields: [userId], references: [id])
    template    Template    @relation(fields: [templateId], references: [id])
    workoutLogs WorkoutLog[]
}

model WorkoutLog {
    id          Int      @id @default(autoincrement())
    workoutId   Int
    exerciseId  Int
    sets        Int
    reps        Int
    weight      Float
    createdAt   DateTime @default(now())
    workout     Workout  @relation(fields: [workoutId], references: [id])
    exercise    Exercise @relation(fields: [exerciseId], references: [id])

    @@unique([workoutId, exerciseId])
}

model Trainer {
    trainerId   String
    traineeId   String
    createdAt   DateTime @default(now())
    trainer     User     @relation("TrainerToTrainees", fields: [trainerId], references: [id])
    trainee     User     @relation("TraineeToTrainers", fields: [traineeId], references: [id])

    @@id([trainerId, traineeId])
}

model AssignedTemplate {
    id          Int       @id @default(autoincrement())
    trainerId   String
    traineeId   String
    templateId  Int
    assignedAt  DateTime  @default(now())
    trainer     User      @relation("AssignedTemplatesAsTrainer", fields: [trainerId], references: [id])
    trainee     User      @relation("AssignedTemplatesAsTrainee", fields: [traineeId], references: [id])
    template    Template  @relation("AssignedTemplateTemplate", fields: [templateId], references: [id])

    @@unique([trainerId, traineeId, templateId])
}

model Schedule {
    id        Int       @id @default(autoincrement())
    userId    String
    date      DateTime
    createdAt DateTime  @default(now())
    user      User      @relation(fields: [userId], references: [id])
    scheduledWorkouts ScheduledWorkout[]

    @@unique([userId, date])
}

model ScheduledWorkout {
    id         Int       @id @default(autoincrement())
    scheduleId Int
    templateId Int
    createdAt  DateTime  @default(now())
    schedule   Schedule  @relation(fields: [scheduleId], references: [id])
    template   Template  @relation(fields: [templateId], references: [id])

    @@unique([scheduleId, templateId])
}
